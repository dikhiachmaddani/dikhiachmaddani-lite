---
import SEO, { type Props as SEOProps } from '@/components/SEO.astro';
import '@/styles/global.css';
import { ClientRouter } from 'astro:transitions';
export interface Props {
	seo: SEOProps;
}
---

<!doctype html>
<html lang="en">
	<head>
		<SEO {...Astro.props.seo} />
		<ClientRouter />
	</head>
	<body>
		<section class="fixed z-10 left-0 right-0 top-0 grid grid-cols-11">
			<div class="col-span-4 md:col-span-5">
				<div id="top-left-bar" class="w-full h-2 bg-[#0C3F33] transition-all duration-300"></div>
			</div>
			<div class="col-span-3 md:col-span-1">
				<div class="w-full flex justify-evenly">
					<div class="middle-bar h-10 w-[1px] bg-[#0C3F33] transition-all duration-300"></div>
					<div class="middle-bar h-12 w-[1px] bg-[#0C3F33] transition-all duration-300"></div>
					<div class="middle-bar h-14 w-[1px] bg-[#0C3F33] transition-all duration-300"></div>
					<div class="middle-bar h-16 w-[1px] bg-[#0C3F33] transition-all duration-300"></div>
					<div class="middle-bar h-16 w-[1px] bg-[#B8021C] transition-all duration-300"></div>
					<div class="middle-bar h-14 w-[1px] bg-[#B8021C] transition-all duration-300"></div>
					<div class="middle-bar h-12 w-[1px] bg-[#B8021C] transition-all duration-300"></div>
					<div class="middle-bar h-10 w-[1px] bg-[#B8021C] transition-all duration-300"></div>
				</div>
			</div>
			<div class="col-span-4 md:col-span-5">
				<div class="w-full h-2 bg-[#B8021C] transition-all duration-300"></div>
			</div>
		</section>

		<slot />

		<script>
			let isRandomMode = false, randomTimeout = null;
			
			const heightClasses = ['h-2', 'h-4', 'h-6', 'h-8', 'h-10', 'h-12', 'h-14', 'h-16'];
		  
			function handleScroll() {
			  if (isRandomMode) return;
			  const scrollY = window.scrollY, bars = document.getElementsByClassName('middle-bar');
			  
			  Array.from(bars).forEach(bar => {
				const element = bar as HTMLElement;
				if (!element) return;
				
				const originalHeight = element.dataset.originalHeight || (element.dataset.originalHeight = element.className.match(/h-\d+/)?.[0] || 'h-10');
				element.classList.toggle('h-4', scrollY > 20);
				element.classList.toggle(originalHeight, scrollY <= 20);
			  });
			}
		  
			function setRandomHeights() {
			  Array.from(document.getElementsByClassName('middle-bar')).forEach(bar => {
				const element = bar as HTMLElement;
				if (!element) return;
		  
				if (!element.dataset.originalHeight) {
				  element.dataset.originalHeight = element.className.match(/h-\d+/)?.[0] || 'h-10';
				}
		  
				heightClasses.forEach(height => element.classList.remove(height));
				
				const randomHeight = heightClasses[Math.floor(Math.random() * heightClasses.length)];
				element.classList.add(randomHeight);
			  });
			}
		  
			function restoreOriginalHeights() {
			  Array.from(document.getElementsByClassName('middle-bar')).forEach(bar => {
				const element = bar as HTMLElement;
				if (element?.dataset.originalHeight) {
				  heightClasses.forEach(height => element.classList.remove(height));
				  element.classList.add(element.dataset.originalHeight);
				}
			  });
			  isRandomMode = false;
			}
		  
			function handleClick() {
			  if (isRandomMode) return;
			  
			  isRandomMode = true;
			  let changeCount = 0;
			  
			  const changeHeights = () => {
				setRandomHeights();
				if (++changeCount < 20) randomTimeout = setTimeout(changeHeights, 100);
				else { restoreOriginalHeights(); randomTimeout = null; }
			  };
		  
			  changeHeights();
			}
		  
			document.addEventListener('click', handleClick);
			window.addEventListener('scroll', handleScroll);
			handleScroll();
		  </script>
		  
		  
	</body>
</html>